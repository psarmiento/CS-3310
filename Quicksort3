/*
	Quicksort3.cpp 
	This quicksort is very similar to regular quicksort but will randomly swap arr[low] with 
	a randomized array element if SIZE > 16
*/

#include <iostream>
#include <ctime>
using namespace std;

int partition(int a[], int low, int high)
{
	int pivot = a[high];

	int j = low;
	int i, t; //t is temporary variable

	// Check of array value is less than pivot
	for (i = low; i < high; i++)
	{
		if (a[i] <= pivot)
		{
			t = a[i];
			a[i] = a[j];
			a[j] = t;
			j++;
		}
	}
	//Now exchanging value of
	//pivot and P-index
	t = a[high];
	a[high] = a[j];
	a[j] = t;

	//at last returning the pivot value index
	return j;
}
void Quicksort(int arr[], int high, int low)
{
	if (high < low)
	{
		int arrSize = low - high;
		// If arrSize > 16, then swap arr[0] with a random array element 
		if (arrSize > 16) {
			int temp = arr[0];
			int randVal = rand() % arrSize;
			arr[0] = arr[randVal];
			arr[randVal] = temp;
		}

		int index = partition(arr, high, low);
		Quicksort(arr, high, index - 1);
		Quicksort(arr, index + 1, low);
	}
}

// copy array to be sorted into temp array 
void copy(int temp[], int arr[], int size) {
	for (int x = 0; x < size; x++)
		temp[x] = arr[x];
}

void printArray(int arr[], int size) {
	for (int x = 0; x < size; x++)
		cout << arr[x] << " ";

	cout << endl;
}

int main()
{
	srand(time(NULL));

	const int SIZE = 65536;
	int arr[SIZE];
	int temp[SIZE];

	// Generate random numbers in array 
	for (int x = 0; x < SIZE; x++) {
		arr[x] = rand() % 100 + 1;
	}

	// print unsorted array 
	if (SIZE <= 32) {
		cout << "Unsorted array: ";
		printArray(arr, SIZE);
	}
	// sort temp array and get average time from loop
	clock_t begin = clock();
	for (int x = 0; x < 10; x++) {
		copy(temp, arr, SIZE);
		Quicksort(temp, 0, SIZE - 1);

	}
	clock_t end = clock();
	double time = double(end - begin) / CLOCKS_PER_SEC;

	cout << "Size: " << SIZE << endl;
	cout << "Time: " << time / SIZE << endl;	
	// print sorted array 
	if (SIZE <= 32) {
		cout << "Sorted array: ";
		printArray(temp, SIZE);
	}
}
